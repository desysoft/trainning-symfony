<?php

namespace OC\platformBundle\Repository;

//namespace OC\platformBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository {

    public function getAdvertWithApplication(array $categoryName) {
        $qb = $this->createQueryBuilder('a');
        $qb->innerJoin('a.categories', 'c')->addSelect('c');
        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));

        return $qb->getQuery()->getResult();
    }

    public function getAdverts($page, $nbPerPage) {

        $query = $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.categories', 'c')
                ->addSelect('c')
                ->orderBy('a.date', 'DESC')
                ->getQuery();

        // On définit l'annonce à partir de laquelle commencer la liste
        $query->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage)// Ainsi que le nombre d'annonce à afficher sur une page

        ;

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
//        return $query->getResult();
    }

    public function getAdvertWithNotApplications($int_days) {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.applications', 'app', 'WITH',"DATE_DIFF(NOW(),a.updatedAt)>$int_days")
            ->addSelect('app');
        $listAdvert = $qb->getQuery()->getResult();
        
        foreach ($listAdvert as $advert) {
            ;
        }
    }

}
